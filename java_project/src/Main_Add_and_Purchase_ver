import javax.swing.*;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

class UserDAO {
    public boolean registerUser(String name, String email, String password, String role) {
        String query = "INSERT INTO User (name, email, password, role) VALUES (?, ?, ?, ?)";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setString(1, name);
            pstmt.setString(2, email);
            pstmt.setString(3, password);
            pstmt.setString(4, role);
            return pstmt.executeUpdate() > 0;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
    public boolean login(String email, String password) {
        String query = "SELECT password FROM User WHERE email = ?";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setString(1, email);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) { // 이메일이 존재하는 경우
                String storedPassword = rs.getString("password"); // DB에 저장된 비밀번호
                if (storedPassword.equals(password)) { // 입력한 비밀번호와 비교
                    return true; // 로그인 성공
                } else {
                    System.out.println("비밀번호가 일치하지 않습니다.");
                    return false; // 비밀번호 불일치
                }
            } else {
                System.out.println("해당 이메일이 존재하지 않습니다.");
                return false; // 이메일 없음
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false; // 예외 발생
        }
    }

    public boolean role_check(String email) {
        String query = "SELECT role FROM User WHERE email = ?";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setString(1, email);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) { // 이메일이 존재하는 경우
                String storedRole = rs.getString("role"); // DB에 저장된 역할
                if (storedRole.equals("admin")) {
                    return true; // 해당 email은 관리자
                } else {
                    return false; // 해당 email은 고객
                }
            } else {
                System.out.println("해당 이메일이 존재하지 않습니다.");
                return false; // 이메일 없음
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false; // 예외 발생
        }
    }


}

class Item{
    public void loadInventoryData(DefaultTableModel tableModel) {
        String query = "SELECT * FROM Inventory";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            ResultSet rs = stmt.executeQuery();

            while (rs.next()) {
                int productId = rs.getInt("product_id");
                String productName = rs.getString("product_name");
                String category = rs.getString("category");
                int quantity = rs.getInt("quantity");
                double price = rs.getDouble("price");

                // 데이터를 테이블 모델에 추가
                tableModel.addRow(new Object[]{productId, productName, category, quantity, price});
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public boolean updateInventory(int productId, int newQuantity) {
        String query = "UPDATE Inventory SET quantity = ? WHERE product_id = ?";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setInt(1, newQuantity);  // 새로운 수량
            pstmt.setInt(2, productId);    // 제품 ID

            int rowsUpdated = pstmt.executeUpdate();  // 업데이트된 행 수 반환
            return rowsUpdated > 0;  // 업데이트가 성공적으로 이루어진 경우
        } catch (Exception e) {
            e.printStackTrace();
            return false;  // 예외 발생 시 실패
        }
    }
}

class DatabaseUtil {
    private static final String URL = "jdbc:mysql://localhost:3306/ShoppingCartSystem";
    private static final String USER = "root";
    private static final String PASSWORD = "0926";

    public static Connection getConnection() throws Exception {
        return DriverManager.getConnection(URL, USER, PASSWORD);
    }
}

class Cart{
    public static boolean isProductInCart(int productId, DefaultTableModel cartTableModel) {
        for (int i = 0; i < cartTableModel.getRowCount(); i++) {
            int cartProductId = (int) cartTableModel.getValueAt(i, 0);
            if (cartProductId == productId) {
                return true;
            }
        }
        return false;
    }

    public static void updateProductQuantity(int productId, int newQuantity, DefaultTableModel inventoryModel, DefaultTableModel cartModel) {
        // inventoryModel (재고 목록 테이블)에서 수량을 업데이트
        for (int i = 0; i < inventoryModel.getRowCount(); i++) {
            int cartProductId = (int) inventoryModel.getValueAt(i, 0);
            if (cartProductId == productId) {
                int currentQuantity = (int) inventoryModel.getValueAt(i, 3);  // 재고 테이블에서 수량 가져오기
                inventoryModel.setValueAt(currentQuantity - newQuantity, i, 3); // 재고 수량 업데이트
                break;
            }
        }

        // cartModel (장바구니 테이블)에서 수량을 업데이트
        for (int i = 0; i < cartModel.getRowCount(); i++) {
            int cartProductId = (int) cartModel.getValueAt(i, 0);
            if (cartProductId == productId) {
                int currentQuantity = (int) cartModel.getValueAt(i, 2);  // 장바구니에서 수량 가져오기
                cartModel.setValueAt(currentQuantity + newQuantity, i, 2); // 장바구니 수량 업데이트
                break;
            }
        }
    }
}

public class Main {
    private static DefaultTableModel tableModel;
    private static DefaultTableModel cartTableModel;
    private static JLabel totalPrice;
    private static double sum = 0.0;

    public static void main(String[] args) {

        JFrame frame = new JFrame("ShoppingCartSystem");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(600, 600);

        // CardLayout을 사용하여 패널을 전환
        JPanel cardPanel = new JPanel(new CardLayout());  // 수정된 부분: CardLayout을 사용하여 패널 전환을 관리

        JPanel LoginPanel = new JPanel();
        LoginPanel.setLayout(null); // 수정된 부분: null 레이아웃을 사용하여 컴포넌트 위치 지정
        JPanel RegisterPanel = new JPanel();
        RegisterPanel.setLayout(null);
        JPanel BuyPanel = new JPanel();//구매창 패널
        BuyPanel.setLayout(null);
        JPanel CartPanel = new JPanel();
        CartPanel.setLayout(null);

        // 각 패널을 cardPanel에 추가
        cardPanel.add(LoginPanel, "LoginPanel");
        cardPanel.add(RegisterPanel, "RegisterPanel");
        cardPanel.add(BuyPanel, "BuyPanel");
        cardPanel.add(CartPanel, "CartPanel");

        CardLayout cardLayout = (CardLayout) cardPanel.getLayout();

        // 로그인 패널 구성
        JLabel Email_Login = new JLabel("Email");
        Email_Login.setBounds(100, 100, 100, 20);
        JLabel Password_Login = new JLabel("Password");
        Password_Login.setBounds(100, 150, 100, 20);

        JTextField EmailField_Login = new JTextField();
        EmailField_Login.setBounds(180, 100, 200, 20);
        JPasswordField PasswordField_Login = new JPasswordField();
        PasswordField_Login.setBounds(180, 150, 200, 20);

        JButton Login_Button = new JButton("Login");
        Login_Button.setBounds(100, 300, 100, 20);
        Login_Button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                UserDAO userDAO = new UserDAO();

                if(userDAO.login(EmailField_Login.getText(), PasswordField_Login.getText())){
                    JOptionPane.showMessageDialog(null, "Login Success", "Message", JOptionPane.INFORMATION_MESSAGE);
                    if(userDAO.role_check(EmailField_Login.getText())){
                       //로그인에 성공하고, 관리자 계정이면 제품 관리자 패널로 이동해야함
                    }
                    else{
                        tableModel.setRowCount(0);
                        Item item = new Item();
                        item.loadInventoryData(tableModel); // 테이블 모델에 데이터를 로드
                        cardLayout.show(cardPanel, "BuyPanel");//로그인에 성공하고 고객 계정이라면 구매 패널로 이동
                    }
                }
                else
                    JOptionPane.showMessageDialog(null, "Login Fail", "Message", JOptionPane.INFORMATION_MESSAGE);


            }
        });

        JButton Register_Button_Login = new JButton("Register");
        Register_Button_Login.setBounds(250, 300, 100, 20);
        Register_Button_Login.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cardLayout.show(cardPanel, "RegisterPanel");  // 수정된 부분: "RegisterPanel"로 전환
            }
        });

        LoginPanel.add(Email_Login);
        LoginPanel.add(Password_Login);
        LoginPanel.add(EmailField_Login);
        LoginPanel.add(PasswordField_Login);
        LoginPanel.add(Login_Button);
        LoginPanel.add(Register_Button_Login);




        // 회원가입 패널 구성
        JLabel Name_Register = new JLabel("Name");
        Name_Register.setBounds(100, 100, 100, 20);
        JLabel Email_Register = new JLabel("Email");
        Email_Register.setBounds(100, 150, 100, 20);
        JLabel Password_Register = new JLabel("Password");
        Password_Register.setBounds(100, 200, 100, 20);

        JTextField NameField_Register = new JTextField();
        NameField_Register.setBounds(180, 100, 200, 20);
        JTextField EmailField_Register = new JTextField();
        EmailField_Register.setBounds(180, 150, 200, 20);
        JPasswordField PasswordField_Register = new JPasswordField();
        PasswordField_Register.setBounds(180, 200, 200, 20);

        JButton Register_Button = new JButton("Register");
        Register_Button.setBounds(100, 300, 100, 20);
        Register_Button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                UserDAO userDAO = new UserDAO();
                //회원가입은 고객 계정으로만 가능
                if(userDAO.registerUser(NameField_Register.getText(), EmailField_Register.getText(), PasswordField_Register.getText(), "customer")) {
                    JOptionPane.showMessageDialog(null, "Registration Success", "Message", JOptionPane.INFORMATION_MESSAGE);
                    cardLayout.show(cardPanel, "LoginPanel");
                }
                else
                    JOptionPane.showMessageDialog(null, "Registration Fail", "Message", JOptionPane.INFORMATION_MESSAGE);
            }
        });

        RegisterPanel.add(Name_Register);
        RegisterPanel.add(Email_Register);
        RegisterPanel.add(Password_Register);
        RegisterPanel.add(NameField_Register);
        RegisterPanel.add(EmailField_Register);
        RegisterPanel.add(PasswordField_Register);
        RegisterPanel.add(Register_Button);


        //구매 패널 구성
        String[] columnNames = {"Product ID", "Product Name", "Category", "Quantity", "Price"};
        tableModel = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                // 모든 셀에 대해 수정 불가 설정
                return false;
            }
        };
        JTable inventoryTable = new JTable(tableModel);
        inventoryTable.getSelectionModel().addListSelectionListener(event -> {
            // 이벤트가 발생한 JTable에서 선택된 행 가져오기
            int selectedRow = inventoryTable.getSelectedRow();
            // 선택된 행이 있는 경우
            if (selectedRow != -1) {
                int confirmResult = JOptionPane.showConfirmDialog(null,
                        "Do you want to add cart?", "Confirm", JOptionPane.YES_NO_OPTION);
                if (confirmResult == JOptionPane.YES_OPTION) {
                    double price = (double) tableModel.getValueAt(selectedRow, 4);
                    String quantityInput = JOptionPane.showInputDialog(null,
                            "Enter the quantity:", "Quantity", JOptionPane.QUESTION_MESSAGE);
                    try {
                        int quantity = Integer.parseInt(quantityInput);
                        int productId = (int) tableModel.getValueAt(selectedRow, 0);
                        int Max_quan = (int) tableModel.getValueAt(selectedRow, 3);
                        if(quantity > Max_quan){
                            JOptionPane.showMessageDialog(null, "Quantity Exceeded", "Message", JOptionPane.INFORMATION_MESSAGE);
                        }
                        else if (quantity > 0) {
                            Cart cart = new Cart();
                            if (!cart.isProductInCart(productId, cartTableModel)) {
                                cartTableModel.addRow(new Object[]{
                                        productId,
                                        tableModel.getValueAt(selectedRow, 1),  // 상품명
                                        0,
                                        price
                                });
                            }
                            cart.updateProductQuantity(productId, quantity, tableModel,cartTableModel);

                            sum += quantity*price; // 총합 업데이트
                            totalPrice.setText("Total Price: " + sum); // 합계 레이블 업데이트
                        }else {
                            JOptionPane.showMessageDialog(null, "Please enter a valid quantity.", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    } catch (NumberFormatException ex) {
                        JOptionPane.showMessageDialog(null, "Invalid quantity. Please enter a number.", "Error", JOptionPane.ERROR_MESSAGE);
                    }

                } else {
                    System.out.println("You selected NO");
                }
            }
        });

        JScrollPane scrollPane = new JScrollPane(inventoryTable);
        scrollPane.setBounds(50, 50, 400, 200); // JPanel의 일부 공간만 차지
        BuyPanel.add(scrollPane);

        totalPrice = new JLabel("Total Price : "+"0");
        totalPrice.setBounds(100, 400, 300, 100);
        totalPrice.setFont(new Font("Times New Roman", Font.PLAIN, 20));
        BuyPanel.add(totalPrice);

        JButton goCart = new JButton("Go Cart");
        goCart.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cardLayout.show(cardPanel, "CartPanel");
            }
        });
        goCart.setBounds(450, 20, 100, 20);
        BuyPanel.add(goCart);


        //카트 패널 구성
        String[] cartColumnNames = {"Product ID", "Product Name", "Quantity", "Price"};
        cartTableModel = new DefaultTableModel(cartColumnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // 셀 수정 불가
            }
        };

        JTable cartTable = new JTable(cartTableModel);
        JScrollPane cartScrollPane = new JScrollPane(cartTable);
        cartScrollPane.setBounds(50, 50, 400, 200);
        CartPanel.add(cartScrollPane);

        JButton credit = new JButton("Credit");
        credit.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int confirmResult = JOptionPane.showConfirmDialog(null,
                        "Total Price : "+sum+"\nWould you like to pay for the items in your shopping cart?", "Confirm", JOptionPane.YES_NO_OPTION);
                if (confirmResult == JOptionPane.YES_OPTION) {

                }else ;
            }
        });
        credit.setBounds(100, 500, 100, 20);

        // 프레임에 cardPanel 추가
        frame.add(cardPanel);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }
}
